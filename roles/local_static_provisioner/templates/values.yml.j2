{%- raw -%}
#
# Common options.
#
common:
  #
  # Defines whether to generate rbac roles
  #
  rbac:
{% endraw %}
{% filter indent(width=4) %}
    {{ helm_lsp_common.rbac }}
{%- endfilter %}{%- raw %}  #
  # Defines whether to generate a serviceAccount
  #
  serviceAccount:
{% endraw %}
{% filter indent(width=4) %}
    {{ helm_lsp_common.serviceAccount }}
{%- endfilter %}{%- raw %}  #
  # Beta PV.NodeAffinity field is used by default. If running against pre-1.10
  # k8s version, the `useAlphaAPI` flag must be enabled in the configMap.
  #
  useAlphaAPI: {% endraw %}{{ helm_lsp_common.useAlphaAPI }}{% raw %}
  #
  # Indicates if PVs should be dependents of the owner Node.
  #
  setPVOwnerRef: {% endraw %}{{ helm_lsp_common.setPVOwnerRef }}{% raw %}
  #
  # Provisioner clean volumes in process by default. If set to true, provisioner
  # will use Jobs to clean.
  #
  useJobForCleaning: {% endraw %}{{ helm_lsp_common.useJobForCleaning }}{% raw %}
  #
  # Provisioner name contains Node.UID by default. If set to true, the provisioner
  # name will only use Node.Name.
  #
  useNodeNameOnly: {% endraw %}{{ helm_lsp_common.useNodeNameOnly }}{% raw %}
  #
  # Resync period in reflectors will be random between minResyncPeriod and
  # 2*minResyncPeriod. Default: 5m0s.
  #
  minResyncPeriod: {% endraw %}{{ helm_lsp_common.minResyncPeriod }}{% raw %}
  #
  # Mount the host's `/dev/` by default so that block device symlinks can be
  # resolved by the containers
  #
  mountDevVolume: {% endraw %}{{ helm_lsp_common.mountDevVolume }}{% raw %}
  #
  # Map of label key-value pairs to apply to the PVs created by the
  # provisioner. Uncomment to add labels to the list.
  #
  #labelsForPV:
  #  pv-labels: can-be-selected
{% endraw %}
{% if helm_lsp_common.labelsForPV is defined %}
{% filter indent(width=4) %}
  {{ helm_lsp_common.labelsForPV }}
{%- endfilter %}{% endif %}{% raw %}
#
# Configure storage classes.
#
classes:
{% endraw %}
{% for storage_class in helm_lsp_classes %}
- name: {{ storage_class.name }}
  hostDir: {{ storage_class.hostDir }}
  volumeMode: {{ storage_class.volumeMode }}
  fsType: {{ storage_class.fsType }}
  namePattern: "{{ storage_class.namePattern }}"
  blockCleanerCommand:
{% for cleaner in storage_class.blockCleanerCommand %}
    - "{{ cleaner }}"
{% endfor %}
{% if storage_class.storageClass is defined %}
  storageClass:
{% filter indent(width=4) %}
    {{ storage_class.storageClass }}
{%- endfilter %}{% endif %}{%- endfor %}{% raw %}
#
# Configure DaemonSet for provisioner.
#
daemonset:
  #
  # Defines annotations for each Pod in the DaemonSet.
  #
  podAnnotations: {}
  #
  # Defines labels for each Pod in the DaemonSet.
  #
  podLabels: {}
  #
  # Defines Provisioner's image name including container registry.
  #
  image: k8s.gcr.io/sig-storage/local-volume-provisioner:v2.4.0
  #
  # Defines Image download policy, see kubernetes documentation for available values.
  #
  #imagePullPolicy: Always
  #
  # Defines a name of the Pod Priority Class to use with the Provisioner DaemonSet
  #
  # Note that if you want to make it critical, specify "system-cluster-critical"
  # or "system-node-critical" and deploy in kube-system namespace.
  # Ref: https://k8s.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/#marking-pod-as-critical
  #
  #priorityClassName: system-node-critical
  # If configured, nodeSelector will add a nodeSelector field to the DaemonSet PodSpec.
  #
  # NodeSelector constraint for local-volume-provisioner scheduling to nodes.
  # Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  nodeSelector: {}
  #
  # If configured KubeConfigEnv will (optionally) specify the location of kubeconfig file on the node.
  #  kubeConfigEnv: KUBECONFIG
  #
  # List of node labels to be copied to the PVs created by the provisioner in a format:
  #
  #  nodeLabels:
  #    - failure-domain.beta.kubernetes.io/zone
  #    - failure-domain.beta.kubernetes.io/region
  #
  # If configured, tolerations will add a toleration field to the DaemonSet PodSpec.
  #
  # Node tolerations for local-volume-provisioner scheduling to nodes with taints.
  # Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []
  #
  # If configured, affinity will add a affinity filed to the DeamonSet PodSpec.
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  affinity: {}
  #
  # If configured, resources will set the requests/limits field to the Daemonset PodSpec.
  # Ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
  resources: {}
    # limits:
    #   memory: "512Mi"
    #   cpu: "1000m"
    # requests:
    #   memory: "32Mi"
    #   cpu: "10m"
  #
  # If set to false, containers created by the Provisioner Daemonset will run without extra privileges.
  privileged: true
#
# Configure Prometheus monitoring
#
serviceMonitor:
{% endraw %}
{% filter indent(width=2) %}
  {{ helm_lsp_service_monitor }}
{%- endfilter %}{% raw %}
#
# Overrice the default chartname or releasename
#
nameOverride: ""
fullnameOverride: ""
{%- endraw -%}